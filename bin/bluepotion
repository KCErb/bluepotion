#!/usr/bin/env ruby

require "erb"
require "rubygems"
require 'open-uri'

$:.unshift(File.join(File.dirname(__FILE__), "/../lib/project"))
require "version"

class PotionCommandLine
  HELP_TEXT = %{     potion version #{BluePotion::VERSION}

     Some things you can do with the bluepotion command:

     > bluepotion create my_new_app

     > bluepotion create screen foo
     > bluepotion create xml_screen foo

     Misc
     > bluepotion -h, --help
     > bluepotion -v, --version
     }

  class << self
    VALID_CREATE_TYPES = [
      :screen,
      :xml_screen
    ]

    def create(template_or_app_name, *options)
      if template_or_app_name.nil?
        puts "BluePotion - Invalid command, try adding an application name or template name."
        return
      end

      options.compact!
      if options.first == 'dry_run'
        @dry_run = true
        options.slice!(0)
      end

      if options.count > 0
        unless options.first.include?('--')
          name = options.slice!(0)
          unless VALID_CREATE_TYPES.include?(template_or_app_name.to_sym)
            puts "BluePotion - Invalid command, do something like this: bluepotion create screen foo\n"
            return
          end
        end
      end

      if name
        insert_from_template(template_or_app_name, name)
      else
        #ensure_template_dir
        create_app(template_or_app_name)
        options.each do |option|
          if SKIP_FLAGS.include?(option)
            Dir.chdir("./#{template_or_app_name}")
            remove(option.split('-').last, true)
            Dir.chdir('..')
          end
        end
      end
    end

    def create_app(app_name)
      puts '     Creating app'

      `motion create --template=https://github.com/infinitered/bluepotion-template.git #{app_name}`

      puts %{
      Complete. Things you should do:
      > cd #{app_name}
      > bundle
      > rake newclear
      (main)> exit
      }
    end

    def template_path(template_name)
      sub_path = "templates/#{template_name}/"

      # First check local directory, use that if it exists
      if Dir.exist?("#{Dir.pwd}/#{sub_path}")
        "#{Dir.pwd}/#{sub_path}"
      else # Then check the gem
        begin
          spec = Gem::Specification.find_by_name("bluepotion")
          gem_root = spec.gem_dir
          "#{gem_root}/#{sub_path}"
        rescue Exception => e
          puts "BluePotion - could not find template directory\n"
          nil
        end
      end
    end

    def insert_from_template(template_name, name)
      return unless %w{screen xml_screen}.include? template_name

      puts "\n     Creating #{template_name}: #{name}\n\n"

      return unless (@template_path = template_path(template_name))
      files = Dir["#{@template_path}**/*"].select {|f| !File.directory? f}

      @name = name.gsub(/_?(screen|controller|stylesheet)/,'')
      @name_camel_case = @name.split('_').map{|word| word.capitalize}.join

      files.each do |template_file_path_and_name|
        @in_app_path = File.dirname(template_file_path_and_name).gsub(@template_path, '')
        @ext = File.extname(template_file_path_and_name)
        @file_name = File.basename(template_file_path_and_name, @ext)

        @new_file_name = @file_name.gsub('name', @name)
        @new_file_path_name = "#{Dir.pwd}/#{@in_app_path}/#{@new_file_name}#{@ext}"

        if @dry_run
          puts "\n     Instance vars:"
          self.instance_variables.each{|var| puts "     #{var} = #{self.instance_variable_get(var)}"}
          puts
        end

        if Dir.exist?(@in_app_path)
          puts "     Using existing directory: #{@in_app_path}"
        else
          puts "  \u0394  Creating directory: #{@in_app_path}"
          Dir.mkdir(@in_app_path) unless @dry_run
        end

        results = load_and_parse_erb(template_file_path_and_name)

        if File.exists?(@new_file_path_name)
          puts "  X  File exists, SKIPPING: #{@new_file_path_name}"
        else
          puts "  \u0394  Creating file: #{@new_file_path_name}"
          File.open(@new_file_path_name, 'w+') { |file| file.write(results) } unless @dry_run
        end
      end

      puts "\n     Done"
    end

    def load_and_parse_erb(template_file_name_and_path)
      template_file = File.open(template_file_name_and_path, 'r').read
      erb = ERB.new(template_file)
      erb.result(binding)
    end

    def remove(type, show_output=true)
      case type
      when 'foo'
        #remove_lines('Gemfile', /gem ('|")cdq('|")/, show_output)
        #remove_lines('app/app_delegate.rb', /include CDQ|cdq.setup/, show_output)
        #remove_lines('Rakefile', /schema:build/, show_output)
        #File.delete('schemas/0001_initial.rb') if File.exists?('schemas/0001_initial.rb')
        #File.delete('resources/cdq.yml') if File.exists?('resources/cdq.yml')
        #Dir.delete('schemas') if Dir.exists?('schemas')
      else
        puts "BluePotion - Invalid command option '#{type}', bluepotion remove only works with foo"
      end
    end

    def remove_lines(file, match, show_output)
      puts "Modifying #{file}" if show_output
      data = IO.readlines(file)
      File.open(file, 'w') do |f|
        data.each do |line|
          unless line =~ match
            f.puts line
          end
        end
      end
    end

  end
end

# Process input, execute actions
unless ARGV.length > 0
  puts "bluepotion - Invalid command, do something like this: bluepotion create my_new_app\n"
  puts PotionCommandLine::HELP_TEXT
  exit
end

action = ARGV[0]
query = ARGV[1]

case action
when 'create'
  PotionCommandLine.create(ARGV[1], ARGV[2], ARGV[3])
when 'remove'
  PotionCommandLine.remove(ARGV[1])
when '--help', '-h'
  puts PotionCommandLine::HELP_TEXT
when '-v', '--version'
  puts BluePotion::VERSION
else
  puts 'bluepotion - Invalid action'
  puts PotionCommandLine::HELP_TEXT
end
